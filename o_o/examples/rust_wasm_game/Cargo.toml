# You must change these to your own details.
[package]
name = "rust_wasm_game"
version = "0.1.0"
authors = ["sugiura130418@icloud.com"]
categories = ["wasm"]
edition = "2021"
readme = "README.md"
description = "My super awesome Rust, WebAssembly, and Webpack project!"

[lib]
crate-type = ["cdylib"]

[profile.release]
# This makes the compiled code faster and smaller, but it makes compiling slower,
# so it's only enabled in release mode.
lto = true

[features]
# If you uncomment this line, it will enable `wee_alloc`:
# default = ["wee_alloc"]

[dependencies]
# The `wasm-bindgen` crate provides the bare minimum functionality needed
# to interact with JavaScript.
anyhow = "*"
console_error_panic_hook = "0.1.*"
futures = "0.3.*"
getrandom = { version = "*", features = ["js"] }
gloo-utils = { version = "0.1", features = ["serde"] }
rand = "*"
serde = { version = "1.0.*", features = ["derive"] }
wasm-bindgen = "0.2.*"
wasm-bindgen-futures = "0.4.*"

# The `web-sys` crate allows you to interact with the various browser APIs,
# like the DOM.
[dependencies.web-sys]
version = "0.3.*"
features = [
	"Performance",
	"Response",
	"console",
	"Window",
	"Document",
	"HtmlCanvasElement",
	"HtmlImageElement",
	"CanvasRenderingContext2d",
	"KeyboardEvent",
]

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so it's only enabled
# in debug mode.

# These crates are used for running unit tests.
[dev-dependencies]
js-sys = "0.3.*"
wasm-bindgen-test = "0.3.*"
